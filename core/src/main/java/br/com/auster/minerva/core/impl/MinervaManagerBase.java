/*
/*
 * Copyright (c) 2004 Auster Solutions. All Rights Reserved.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Created on Sep 15, 2005
 */
package br.com.auster.minerva.core.impl;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.w3c.dom.Element;

import br.com.auster.common.util.I18n;
import br.com.auster.common.xml.DOMUtils;
import br.com.auster.minerva.core.MinervaConfigurationConstants;
import br.com.auster.minerva.core.MinervaManager;
import br.com.auster.minerva.core.Report;
import br.com.auster.minerva.core.ReportFactory;
import br.com.auster.minerva.core.ReportInitializationException;
import br.com.auster.minerva.spi.ReportRequest;

/**
 * Basic implementation of the <code>MinervaManager</code> interface. In this case :
 * <ul>
 *   <li>dispatchers are not supported</li>
 * 	 <li>reports are executed in the current listener thread</li>
 * </ul>
 * <p>  
 * The configuration layout for this implementation is : 
 * 
 * <pre>
 * 
 * &lt;!-- No configuration parameters are accepted by this implementation --&gt;
 * &lt;configuration/&gt;
 * 
 * &lt;!-- factory class implementation --&gt;
 * &lt;factory class="..."&gt;
 *     &lt;!-- factory configuration area --&gt;
 *     &lt;configuration&gt;
 *     ...
 *     &lt;/configuration&gt;
 * &lt;/factory&gt;
 * </pre>
 * 
 * @author framos
 * @version $Id$
 */
public class MinervaManagerBase implements MinervaManager {

    
    
	// ----------------------------
	// Class constants
	// ----------------------------
	
    private static final I18n i18n = I18n.getInstance(MinervaManagerBase.class);
    private static final Log log = LogFactory.getLog(MinervaManagerBase.class);

	
	
	// ----------------------------
	// Instance variables
	// ----------------------------
    
    protected ReportFactory factory;
    
    
    
	// ----------------------------
	// Interface methods
	// ----------------------------    
    
    /**
     * @see br.com.auster.minerva.core.MinervaManager#enqueueRequest(br.com.auster.minerva.spi.ReportRequest)
     */
    public boolean enqueueRequest(ReportRequest _request) {
        if (factory == null) {
            throw new IllegalStateException();
        }
        Report r = factory.getReport(_request);
        log.trace("Report generated by factory(" + factory.getClass().getName() + ")" + 
        		".ReportClass:" + r.getClass().getCanonicalName() + ".R.toString()" + r);
        log.debug(i18n.getString("manager.base.requestenqueued", _request.getName()));
        r.generate(_request);
        return true;
    }

    /**
     * @see br.com.auster.minerva.core.MinervaManager#nextFinishedRequest()
     */
    public ReportRequest nextFinishedRequest() {
        throw new UnsupportedOperationException(i18n.getString("manager.base.nextfinishedNotSupported"));
    }

    /**
     * @see br.com.auster.minerva.core.MinervaManager#configure(org.w3c.dom.Element)
     */
    public void configure(Element _configuration) throws ReportInitializationException {
    	log.debug(i18n.getString("manager.base.startConfiguration"));
        Element factoryConfiguration = DOMUtils.getElement(_configuration, 
                                    					   MinervaConfigurationConstants.MINERVA_MANAGER_FACTORY_CONFIGURATION_ELEMENT, true);
        try {
            String klass = DOMUtils.getAttribute(factoryConfiguration, 
                                                 MinervaConfigurationConstants.MINERVA_CLASSNAME_ATTRIBUTE, true);
            log.debug(i18n.getString("manager.base.factoryClass", klass));
            factory = (ReportFactory) Class.forName(klass).newInstance();
            factory.configure(factoryConfiguration);
        } catch (ClassNotFoundException cnfe) {
            throw new ReportInitializationException(cnfe);
        } catch (InstantiationException ie) {
            throw new ReportInitializationException(ie);
        } catch (IllegalAccessException iae) {
            throw new ReportInitializationException(iae);
        }
    }
}
